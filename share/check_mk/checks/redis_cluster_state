#!/usr/bin/python
#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 3.  This test is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
redis_cluster_state_default_levels = {
  "pfailInstances" : (99999, 99999),
  "failInstances" : (99999, 99999),
  "unwantedFlags" : ('pfail', 'fail'),
}

def inventory_redis_cluster_state(info):
  inventory = []
  for line in info:
    name=line[1]
    inventory.append((name, redis_cluster_state_default_levels))
  return inventory

def check_redis_cluster_state(item, params, info):
  for line in info:
    if line[1] == item:
      msg = ""
      state = 0
      perf = []

      pfwarn,pfcrit = params['pfailInstances']
      fwarn, fcrit = params['failInstances']
      swarn, scrit = params['unwantedFlags']

      swarn = swarn.lower().split(',')
      scrit = scrit.lower().split(',')

      node_address = line[1]
      node_flags = line[2].lower().split(',')
      cluster_state = line[3]
      cluster_size = int(line[4])
      cluster_known_nodes = int(line[5])
      cluster_slots_fail = int(line[6])
      cluster_slots_pfail = int(line[7])

      cstate = 'OK'
      if (
            len(filter(lambda x: x in node_flags, scrit)) > 0 or
            cluster_slots_fail > fcrit or
            cluster_slots_pfail > pfcrit
          ):
        state = 2
        cstate = 'CRIT'
      elif (
            len(filter(lambda x: x in node_flags, swarn)) > 0 or
            cluster_slots_fail > fwarn or
            cluster_slots_pfail > pfwarn
            ):
        state = 1
        cstate = 'WARN'

      msg += "State: %s, " % cstate
      msg += "Flags: %s, " % '|'.join(node_flags)
      msg += "Cluster status: %s, " % cluster_state
      msg += "Cluster nodes: Masters: %d / Total: %d, " % (cluster_known_nodes, cluster_size)
      msg += "PFailed slots: %d, " % cluster_slots_pfail
      msg += "Failed slots: %d" % cluster_slots_fail

      perf.append(("clusterSlotsFail", cluster_slots_fail, fwarn, fcrit))
      perf.append(("clusterSlotsPFail", cluster_slots_pfail, pfwarn, pfcrit))
      return state, msg, perf

check_info["redis_cluster_state"] = {
  'check_function':            check_redis_cluster_state,
  'inventory_function':        inventory_redis_cluster_state,
  'service_description':       'Redis Cluster node %s status',
  'has_perfdata':              True,
  'group':                     'redis_cluster_state',
}
